apiVersion: v1
kind: Template
labels:
  template: semantic-wiki-ephemeral
metadata:
  annotations:
    description: 'Mediawiki service, without persistent storage. WARNING: Any data
      stored will be lost upon pod destruction. Only use this template for testing'
    iconClass: icon-php
    tags: instant-app, semanticwiki
  name: mediawiki-ephemeral
objects:
- apiVersion: v1
  kind: Route
  metadata:
    name: ${SERVICE_NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${SERVICE_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${SERVICE_NAME}
    name: ${SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      app: ${SERVICE_NAME}
      deploymentconfig: ${SERVICE_NAME}
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: ${SERVICE_NAME}
          deploymentconfig: ${SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: MEDIAWIKI_SITE_NAME
            value: wiki-test
          - name: MEDIAWIKI_DB_HOST
            value: ${DATABASE_SERVICE_NAME}
          - name: MEDIAWIKI_DB_USER
            value: ${MYSQL_USER}
          - name: MEDIAWIKI_DB_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MEDIAWIKI_DB_NAME
            value: ${MYSQL_DATABASE}
          - name: MEDIAWIKI_ADMIN_USER
            value: ${MEDIAWIKI_ADMIN_USER}
          - name: MEDIAWIKI_ADMIN_PASSWORD
            value: ${MEDIAWIKI_ADMIN_PASSWORD}
          image: semantic-wiki:latest
          name: ${SERVICE_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${SERVICE_NAME}
        from:
          namespace: custom-images
          kind: ImageStreamTag
          name: semantic-wiki:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${SERVICE_NAME}
    name: ${SERVICE_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${SERVICE_NAME}
      deploymentconfig: ${SERVICE_NAME}
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DATABASE_SERVICE_NAME}
  spec:
    portalIP: ""
    ports:
    - name: mysql
      nodePort: 0
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          image: mysql
          imagePullPolicy: IfNotPresent
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          resources: {}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${DATABASE_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - emptyDir:
            medium: ""
          name: ${DATABASE_SERVICE_NAME}-data
    triggers:
    - imageChangeParams:
        automatic: false
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:latest
          namespace: openshift
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}
parameters:
- description: The outside DNS name of the service
  name: APPLICATION_DOMAIN
- description: Database service name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mysql-mediawiki
- description: Mediawiki service name
  name: SERVICE_NAME
  required: true
  value: mediawiki
- description: Username for MySQL user that will be used for accessing the database
  from: user[A-Z0-9]{3}
  generate: expression
  name: MYSQL_USER
  required: true
- description: Password for the MySQL user
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_PASSWORD
  required: true
- description: Database name
  name: MYSQL_DATABASE
  required: true
  value: mediawiki
- description: Mediawiki Admin User
  name: MEDIAWIKI_ADMIN_USER
  required: true
  value: admin
- description: Mediawiki Admin Password
  name: MEDIAWIKI_ADMIN_PASSWORD
  required: true
  value: wikiadmin
